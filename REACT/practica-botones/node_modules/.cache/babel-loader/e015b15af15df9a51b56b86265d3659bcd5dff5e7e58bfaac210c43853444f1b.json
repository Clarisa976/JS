{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/Proyectos/DWECL/DWECL/REACT/practica-botones/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button } from 'reactstrap';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colores: Array(5).fill('secondary'),\n      ultimosBotones: [] //recuerda los ultimos dos\n    };\n  }\n  cambiarColor(numBotoncito) {\n    const {\n      colores,\n      ultimosBotones\n    } = this.state;\n    const nuevaListaColores = [...colores]; // Hacer una copia del array de colores\n    const nuevosUltimosBotones = [...ultimosBotones]; // Copiar la lista de los últimos botones\n\n    // Cambiar el color del botón actual\n    nuevaListaColores[numBotoncito] = nuevaListaColores[numBotoncito] === 'secondary' ? 'info' : 'secondary';\n\n    // Actualizar la lista de botones pulsados\n    if (!nuevosUltimosBotones.includes(numBotoncito)) {\n      nuevosUltimosBotones.push(numBotoncito);\n    }\n\n    // Mantener solo los dos últimos botones en la lista\n    if (nuevosUltimosBotones.length > 2) {\n      const botonARestaurar = nuevosUltimosBotones.shift(); // Sacar el primero de la lista\n      nuevaListaColores[botonARestaurar] = 'secondary'; // Restaurar su color\n    }\n\n    // Actualizar el estado con los nuevos valores\n    this.setState({\n      colores: nuevaListaColores,\n      ultimosBotones: nuevosUltimosBotones\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: this.state.colores[0],\n        onClick: () => this.cambiarColor(0),\n        children: \" Uno\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: this.state.colores[1],\n        onClick: () => this.cambiarColor(1),\n        children: \" Dos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: this.state.colores[2],\n        onClick: () => this.cambiarColor(2),\n        children: \" Tres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: this.state.colores[3],\n        onClick: () => this.cambiarColor(3),\n        children: \" Cuatro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: this.state.colores[4],\n        onClick: () => this.cambiarColor(4),\n        children: \" Cinco\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n} /*\n  cambiarColor(numBotoncito){\n   let copia = this.state.colores;\n   if(this.state.colores[numBotoncito]=='secondary'){\n     copia[numBotoncito]=\"info\";\n   }else{\n     copia[numBotoncito]=\"secondary\";\n   }\n   this.setState({colores:copia})\n  }\n    \n    render(){\n     return (\n       <>\n         <Button color={this.state.colores[0]} onClick={()=>this.cambiarColor(0)}> Uno</Button>\n         <Button color={this.state.colores[1]}onClick={()=>this.cambiarColor(1)}> Dos</Button>\n         <Button color={this.state.colores[2]}onClick={()=>this.cambiarColor(2)}> Tres</Button>\n         <Button color={this.state.colores[3]}onClick={()=>this.cambiarColor(3)}> Cuatro</Button>\n         <Button color={this.state.colores[4]}onClick={()=>this.cambiarColor(4)}> Cinco</Button>\n         \n       </>\n     );\n   }\n  }\n  */\nexport default App;","map":{"version":3,"names":["logo","Button","Component","jsxDEV","_jsxDEV","Fragment","_Fragment","App","constructor","props","state","colores","Array","fill","ultimosBotones","cambiarColor","numBotoncito","nuevaListaColores","nuevosUltimosBotones","includes","push","length","botonARestaurar","shift","setState","render","children","color","onClick","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/opt/lampp/htdocs/Proyectos/DWECL/DWECL/REACT/practica-botones/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button } from 'reactstrap';\nimport { Component } from 'react';\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n      colores:Array(5).fill('secondary'),\n      ultimosBotones: []//recuerda los ultimos dos\n    }\n\n}\ncambiarColor(numBotoncito) {\n  const { colores, ultimosBotones } = this.state;\n  const nuevaListaColores = [...colores]; // Hacer una copia del array de colores\n  const nuevosUltimosBotones = [...ultimosBotones]; // Copiar la lista de los últimos botones\n\n  // Cambiar el color del botón actual\n  nuevaListaColores[numBotoncito] = nuevaListaColores[numBotoncito] === 'secondary' ? 'info' : 'secondary';\n\n  // Actualizar la lista de botones pulsados\n  if (!nuevosUltimosBotones.includes(numBotoncito)) {\n    nuevosUltimosBotones.push(numBotoncito);\n  }\n\n  // Mantener solo los dos últimos botones en la lista\n  if (nuevosUltimosBotones.length > 2) {\n    const botonARestaurar = nuevosUltimosBotones.shift(); // Sacar el primero de la lista\n    nuevaListaColores[botonARestaurar] = 'secondary'; // Restaurar su color\n  }\n\n  // Actualizar el estado con los nuevos valores\n  this.setState({\n    colores: nuevaListaColores,\n    ultimosBotones: nuevosUltimosBotones\n  });\n}\n\nrender() {\n  return (\n    <>\n      <Button color={this.state.colores[0]} onClick={() => this.cambiarColor(0)}> Uno</Button>\n      <Button color={this.state.colores[1]} onClick={() => this.cambiarColor(1)}> Dos</Button>\n      <Button color={this.state.colores[2]} onClick={() => this.cambiarColor(2)}> Tres</Button>\n      <Button color={this.state.colores[3]} onClick={() => this.cambiarColor(3)}> Cuatro</Button>\n      <Button color={this.state.colores[4]} onClick={() => this.cambiarColor(4)}> Cinco</Button>\n    </>\n  );\n}\n}/*\ncambiarColor(numBotoncito){\n  let copia = this.state.colores;\n  if(this.state.colores[numBotoncito]=='secondary'){\n    copia[numBotoncito]=\"info\";\n  }else{\n    copia[numBotoncito]=\"secondary\";\n  }\n  this.setState({colores:copia})\n}\n\n  \n\n  render(){\n    return (\n      <>\n        <Button color={this.state.colores[0]} onClick={()=>this.cambiarColor(0)}> Uno</Button>\n        <Button color={this.state.colores[1]}onClick={()=>this.cambiarColor(1)}> Dos</Button>\n        <Button color={this.state.colores[2]}onClick={()=>this.cambiarColor(2)}> Tres</Button>\n        <Button color={this.state.colores[3]}onClick={()=>this.cambiarColor(3)}> Cuatro</Button>\n        <Button color={this.state.colores[4]}onClick={()=>this.cambiarColor(4)}> Cinco</Button>\n        \n      </>\n    );\n  }\n}\n*/\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}